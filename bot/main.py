import os
import uuid
import logging
import datetime
from decimal import Decimal
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.state import StateFilter
from bot.grpc_client import DonationClient
from bot.config_reader import config
from database import get_database
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.handlers.settings import (
    get_user_currency_amount,
    router as settings_router,
    get_settings_keyboard,
    AVAILABLE_CURRENCIES,
    convert_user_currency_to_usd
)
from database.repositories import UserRepository
from services.crypto_rates_service import crypto_rates_service

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

BOT_TOKEN = config.bot_token.get_secret_value()
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")

grpc_client = DonationClient()


class DonateStates(StatesGroup):
    waiting_for_streamer = State()
    waiting_for_currency = State()
    waiting_for_network = State()
    waiting_for_amount_currency = State()
    waiting_for_amount = State()
    waiting_for_message = State()


class StreamerRegistration(StatesGroup):
    waiting_for_name = State()
    waiting_for_wallet = State()


async def setup_bot():
    db = await get_database()
    await db.connect()
    
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    
    dp.include_router(settings_router)

    async def create_main_menu(telegram_id: int) -> InlineKeyboardMarkup:
        """Creates main menu with user status"""
        streamer = await db.get_streamer(telegram_id, include_inactive=False)
        is_active_streamer = streamer is not None
        
        if is_active_streamer:
            keyboard = [
                [
                    InlineKeyboardButton(text="üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç", callback_data="donate"),
                    InlineKeyboardButton(text="üìä –ú–æ–∏ –¥–æ–Ω–∞—Ç—ã", callback_data="my_donations")
                ],
                [
                    InlineKeyboardButton(text="üí∞ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã", callback_data="streamer_donations"),
                    InlineKeyboardButton(text="‚ùå –ü–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º", callback_data="stop_being_streamer")
                ],
                [
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu"),
                    InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
                ]
            ]
        else:
            keyboard = [
                [
                    InlineKeyboardButton(text="üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç", callback_data="donate"),
                    InlineKeyboardButton(text="üìä –ú–æ–∏ –¥–æ–Ω–∞—Ç—ã", callback_data="my_donations")
                ],
                [
                    InlineKeyboardButton(text="üìà –°—Ç–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º", callback_data="become_streamer"),
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")
                ],
                [
                    InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
                ]
            ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        await db.add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        markup = await create_main_menu(message.from_user.id)
        await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    @dp.callback_query(lambda c: c.data == "settings_menu")
    async def cb_settings_menu(callback: CallbackQuery):
        try:
            db = await get_database()
            await db.connect()
            
            try:
                async with db.get_session() as session:
                    user_repo = UserRepository(session)
                    
                    user = await user_repo.get_or_create_user(
                        telegram_id=callback.from_user.id,
                        username=callback.from_user.username,
                        first_name=callback.from_user.first_name,
                        last_name=callback.from_user.last_name
                    )
                    await session.commit()
                    
                    current_currency = user.preferred_currency
                    currency_info = next(
                        (c for c in AVAILABLE_CURRENCIES if c['code'] == current_currency), 
                        AVAILABLE_CURRENCIES[0]
                    )
                    
                    text = (
                        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.display_name}\n"
                        f"üí± <b>–í–∞–ª—é—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {currency_info['flag']} {currency_info['name']} ({currency_info['symbol']})\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
                    )
                    
                    await callback.message.edit_text(
                        text,
                        reply_markup=get_settings_keyboard(),
                        parse_mode="HTML"
                    )
                    
            finally:
                await db.disconnect()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cb_settings_menu: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "donate")
    async def cb_donate(callback: CallbackQuery, state: FSMContext):
        streamers = await db.get_all_streamers()
        
        if not streamers:
            await callback.message.edit_text(
                "üòî –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return

        keyboard, row = [], []
        for idx, streamer in enumerate(streamers, start=1):
            row.append(InlineKeyboardButton(text=streamer['name'], callback_data=f"streamer_{streamer['id']}"))
            if idx % 2 == 0:
                keyboard.append(row)
                row = []
        if row: 
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await state.set_state(DonateStates.waiting_for_streamer)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "become_streamer")
    async def cb_become_streamer(callback: CallbackQuery, state: FSMContext):
        existing_streamer = await db.get_streamer(callback.from_user.id, include_inactive=True)
        
        if existing_streamer and existing_streamer.get('is_active', False):
            await callback.message.edit_text(
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º–µ—Ä!\n"
                f"–ò–º—è: {existing_streamer['name']}\n"
                f"–ö–æ—à–µ–ª—ë–∫: {existing_streamer['wallet_address'][:6]}...{existing_streamer['wallet_address'][-4:]}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
        elif existing_streamer and not existing_streamer.get('is_active', False):
            await callback.message.edit_text(
                f"üîÑ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞ –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
                f"–•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å—Ç–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º?\n\n"
                f"–ü—Ä–µ–∂–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                f"–ò–º—è: {existing_streamer['name']}\n"
                f"–ö–æ—à–µ–ª—ë–∫: {existing_streamer['wallet_address'][:6]}...{existing_streamer['wallet_address'][-4:]}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="reactivate_streamer")],
                    [InlineKeyboardButton(text="üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="new_streamer_registration")],
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
        else:
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await state.set_state(StreamerRegistration.waiting_for_name)
        
        await callback.answer()

    @dp.message(StreamerRegistration.waiting_for_name)
    async def process_streamer_name(message: types.Message, state: FSMContext):
        name = message.text.strip()
        if len(name) < 2:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        await state.update_data(name=name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):")
        await state.set_state(StreamerRegistration.waiting_for_wallet)

    @dp.message(StreamerRegistration.waiting_for_wallet)
    async def process_streamer_wallet(message: types.Message, state: FSMContext):
        wallet = message.text.strip()
        if not (wallet.startswith('0x') and len(wallet) == 42):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞).")
            return
        
        data = await state.get_data()
        name = data['name']
        
        streamer_id = await db.add_streamer(
            telegram_id=message.from_user.id,
            wallet_address=wallet,
            name=name,
            username=message.from_user.username
        )
        
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–∏–º–µ—Ä!\n"
            f"–ò–º—è: {name}\n"
            f"–ö–æ—à–µ–ª—ë–∫: {wallet[:6]}...{wallet[-4:]}\n"
            f"ID —Å—Ç—Ä–∏–º–µ—Ä–∞: {streamer_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()

    @dp.callback_query(lambda c: c.data == "main_menu")
    async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
        markup = await create_main_menu(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if callback.message.text:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        
        await state.clear()
        await callback.answer()

    @dp.callback_query(StateFilter(DonateStates.waiting_for_streamer), lambda c: c.data.startswith("streamer_"))
    async def cb_streamer(callback: CallbackQuery, state: FSMContext):
        streamer_id = int(callback.data.split("_", 1)[1])
        streamer = await db.get_streamer_by_id(streamer_id)
        
        if not streamer:
            await callback.answer("‚ùå –°—Ç—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if streamer['telegram_id'] == callback.from_user.id:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–Ω–∞—Ç–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", show_alert=True)
            return
        
        await state.update_data(streamer_id=streamer_id, streamer_info=streamer)
        
        assets = await db.get_all_assets()
        
        if not assets:
            await callback.message.edit_text(
                "üòî –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="donate")]
                ])
            )
            await callback.answer()
            return
        
        unique_assets = {}
        for asset in assets:
            symbol = asset['symbol']
            if symbol not in unique_assets:
                unique_assets[symbol] = []
            unique_assets[symbol].append(asset)
        
        keyboard, row = [], []
        for idx, symbol in enumerate(unique_assets.keys(), start=1):
            row.append(InlineKeyboardButton(text=symbol, callback_data=f"symbol_{symbol}"))
            if idx % 3 == 0:
                keyboard.append(row)
                row = []
        if row: 
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="donate")])
        
        await callback.message.edit_text(
            f"–î–æ–Ω–∞—Ç –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞: {streamer['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(DonateStates.waiting_for_currency)
        await callback.answer()

    @dp.callback_query(StateFilter(DonateStates.waiting_for_currency), lambda c: c.data.startswith("symbol_"))
    async def cb_currency(callback: CallbackQuery, state: FSMContext):
        symbol = callback.data.split("_", 1)[1]
        
        assets = await db.get_all_assets()
        
        symbol_assets = [asset for asset in assets if asset['symbol'] == symbol]
        
        if not symbol_assets:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤—ã —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        await state.update_data(selected_symbol=symbol, available_assets=symbol_assets)
        
        keyboard, row = [], []
        for idx, asset in enumerate(symbol_assets, start=1):
            network_name = asset['network'].upper()
            row.append(InlineKeyboardButton(text=network_name, callback_data=f"asset_{asset['id']}"))
            if idx % 2 == 0:
                keyboard.append(row)
                row = []
        if row: 
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="donate")])
        
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {symbol}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(DonateStates.waiting_for_network)
        await callback.answer()

    @dp.callback_query(StateFilter(DonateStates.waiting_for_network), lambda c: c.data.startswith("asset_"))
    async def cb_network(callback: CallbackQuery, state: FSMContext):
        asset_id = int(callback.data.split("_", 1)[1])
        
        asset = await db.get_asset_by_id(asset_id)
        if not asset:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.update_data(asset_id=asset_id, asset_info=asset)
        await state.set_state(DonateStates.waiting_for_amount_currency)
        
        async with db.get_session() as session:
            user_repo = UserRepository(session)
            user_currency = await user_repo.get_preferred_currency(callback.from_user.id)
        
        user_currency_info = next(
            (c for c in AVAILABLE_CURRENCIES if c['code'] == user_currency),
            {'name': 'USD', 'symbol': '$', 'flag': 'üá∫üá∏'}
        )
        
        keyboard = [
            [InlineKeyboardButton(
                text=f"üí∞ –í {asset['symbol']} (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)", 
                callback_data=f"amount_currency_{asset['symbol']}"
            )],
            [InlineKeyboardButton(
                text=f"{user_currency_info['flag']} –í {user_currency_info['name']} ({user_currency_info['symbol']})", 
                callback_data=f"amount_currency_{user_currency}"
            )],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="donate")]
        ]
        
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {asset['symbol']} ({asset['network'].upper()})\n\n"
            f"–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

    @dp.callback_query(StateFilter(DonateStates.waiting_for_amount_currency), lambda c: c.data.startswith("amount_currency_"))
    async def cb_amount_currency(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        selected_currency = callback.data.split("_", 2)[2]  # amount_currency_USD -> USD
        
        data = await state.get_data()
        asset_info = data.get("asset_info")
        
        await state.update_data(amount_currency=selected_currency)
        await state.set_state(DonateStates.waiting_for_amount)
        
        if selected_currency == asset_info['symbol']:
            currency_display = f"{selected_currency} (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)"
        else:
            currency_info = next(
                (c for c in AVAILABLE_CURRENCIES if c['code'] == selected_currency),
                {'name': selected_currency, 'symbol': selected_currency}
            )
            currency_display = f"{currency_info['name']} ({currency_info['symbol']})"
        
        await callback.message.edit_text(
            f"–ê–∫—Ç–∏–≤: {asset_info['symbol']} ({asset_info['network'].upper()})\n"
            f"–í–∞–ª—é—Ç–∞ –≤–≤–æ–¥–∞: {currency_display}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="donate")]
            ])
        )
        await callback.answer()

    @dp.message(DonateStates.waiting_for_amount)
    async def process_amount(message: types.Message, state: FSMContext):
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        
        data = await state.get_data()
        asset_info = data.get("asset_info")
        amount_currency = data.get("amount_currency")
        
        if amount_currency == asset_info['symbol']:
            try:
                crypto_rate = await crypto_rates_service.get_single_rate(amount_currency)
                if crypto_rate is None:
                    fallback_rates = {
                        'ETH': 2600.0, 'BTC': 42000.0, 'USDT': 1.0, 'USDC': 1.0,
                        'BNB': 300.0, 'MATIC': 0.8, 'TRX': 0.1,
                    }
                    crypto_rate = fallback_rates.get(amount_currency, 1.0)
                    logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫—É—Ä—Å –¥–ª—è {amount_currency}: ${crypto_rate:.2f}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {amount_currency}: {e}")
                crypto_rate = {'ETH': 2600.0, 'BTC': 42000.0, 'USDT': 1.0, 'USDC': 1.0, 'BNB': 300.0, 'MATIC': 0.8, 'TRX': 0.1}.get(amount_currency, 1.0)
            
            payment_amount_usd = amount * crypto_rate
            display_amount = f"{amount:.4f} {amount_currency} (‚âà${payment_amount_usd:.2f} USD)"
            
        else:
            if amount_currency == 'USD':
                payment_amount_usd = amount
            else:
                payment_amount_usd = float(await convert_user_currency_to_usd(
                    message.from_user.id, Decimal(str(amount))
                ))
            
            currency_info = next(
                (c for c in AVAILABLE_CURRENCIES if c['code'] == amount_currency),
                {'symbol': amount_currency}
            )
            display_amount = f"{amount:.2f} {currency_info['symbol']} (‚âà${payment_amount_usd:.2f} USD)"
        
        await state.update_data(
            amount=payment_amount_usd,
            original_amount=amount,
            amount_currency=amount_currency,
            display_amount=display_amount
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(DonateStates.waiting_for_message)

    @dp.message(DonateStates.waiting_for_message)
    async def process_message(message: types.Message, state: FSMContext):
        data = await state.get_data()
        streamer_info = data["streamer_info"]
        asset_id = data.get("asset_id")
        asset_info = data.get("asset_info")
        amount = data["amount"]
        original_amount = data.get("original_amount")
        amount_currency = data.get("amount_currency")
        display_amount = data.get("display_amount")
        
        if not asset_id or not asset_info:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        donation_message = "" if message.text == "/skip" else message.text.strip()
        
        if amount_currency == asset_info['symbol']:
            payment_amount = original_amount
        else:
            try:
                crypto_rate = await crypto_rates_service.get_single_rate(asset_info['symbol'])
                if crypto_rate is None:
                    fallback_rates = {
                        'ETH': 2600.0, 'BTC': 42000.0, 'USDT': 1.0, 'USDC': 1.0,
                        'BNB': 300.0, 'MATIC': 0.8, 'TRX': 0.1,
                    }
                    crypto_rate = fallback_rates.get(asset_info['symbol'], 1.0)
                    logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫—É—Ä—Å –¥–ª—è {asset_info['symbol']}: ${crypto_rate:.2f}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {asset_info['symbol']}: {e}")
                crypto_rate = {'ETH': 2600.0, 'BTC': 42000.0, 'USDT': 1.0, 'USDC': 1.0, 'BNB': 300.0, 'MATIC': 0.8, 'TRX': 0.1}.get(asset_info['symbol'], 1.0)
            
            payment_amount = amount / crypto_rate
        
        try:
            donor_name = await db.get_user_by_name_pattern(message.from_user.id)
            
            donation_id = await db.create_donation(
                streamer_id=streamer_info["id"],
                asset_id=asset_id,
                donor_name=donor_name,
                amount=amount,
                message=donation_message,
                payment_url="",
                nonce=""
            )
            
            payment_data = grpc_client.create_payment_link(
                streamer_wallet=streamer_info["wallet_address"],
                amount=payment_amount,
                asset_symbol=asset_info['symbol'],
                network=asset_info['network'],
                donation_id=str(donation_id),
                donor_name=donor_name,
                message=donation_message
            )
            
            await db.update_donation_payment_info(
                donation_id,
                payment_data['payment_url'],
                payment_data['nonce']
            )
            
            expires_datetime = datetime.datetime.fromtimestamp(payment_data['expires_at'])
            expires_str = expires_datetime.strftime('%H:%M')
            
            await message.answer(
                f"üí∞ <b>–î–æ–Ω–∞—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üë§ <b>–°—Ç—Ä–∏–º–µ—Ä:</b> {streamer_info['name']}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {display_amount}\n"
                f"üîó <b>–ê–∫—Ç–∏–≤:</b> {asset_info['symbol']} ({asset_info['network'].upper()})\n"
                f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {donation_message or '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
                f"‚è∞ <b>–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ:</b> {expires_str}\n"
                f"üÜî <b>ID –¥–æ–Ω–∞—Ç–∞:</b> {donation_id}\n\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n{payment_data['payment_url']}\n\n"
                f"‚ö†Ô∏è <i>–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç</i>",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥", callback_data=f"show_qr_{donation_id}")],
                    [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{donation_id}")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        
        await state.clear()

    @dp.callback_query(lambda c: c.data == "received_donations")
    async def cb_received_donations(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤"""
        streamer = await db.get_streamer(callback.from_user.id, include_inactive=False)
        
        if not streamer:
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        stats = await db.get_received_donations_stats(streamer['id'])
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤</b>\n\n"
        text += f"üí∞ <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n"
        text += f"   ‚Ä¢ –î–æ–Ω–∞—Ç–æ–≤: {stats['total']['count']}\n"
        text += f"   ‚Ä¢ –°—É–º–º–∞: {stats['total']['amount']:.2f} (–∫—Ä–∏–ø—Ç–æ)\n\n"
        text += f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n"
        text += f"   ‚Ä¢ –î–æ–Ω–∞—Ç–æ–≤: {stats['month']['count']}\n"
        text += f"   ‚Ä¢ –°—É–º–º–∞: {stats['month']['amount']:.2f} (–∫—Ä–∏–ø—Ç–æ)\n\n"
        text += f"‚è∞ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n"
        text += f"   ‚Ä¢ –î–æ–Ω–∞—Ç–æ–≤: {stats['week']['count']}\n"
        text += f"   ‚Ä¢ –°—É–º–º–∞: {stats['week']['amount']:.2f} (–∫—Ä–∏–ø—Ç–æ)\n\n"
        text += f"<i>üí° –°—É–º–º—ã —É–∫–∞–∑–∞–Ω—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</i>"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "sent_donations" or c.data.startswith("sent_donations_page_"))
    async def cb_sent_donations(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if callback.data == "sent_donations":
            page = 0
        else:
            page = int(callback.data.split("_")[-1])
        
        offset = page * 5
        
        donor_name = await db.get_user_by_name_pattern(callback.from_user.id)
        
        data = await db.get_sent_donations_by_user(donor_name, limit=5, offset=offset)
        
        text = f"üì§ <b>–í–∞—à–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã</b>\n\n"
        text += f"üí∏ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> ~{data['total_amount_usd']:.2f} USD\n"
        text += f"üéØ <b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤:</b> {data['total_count']}\n\n"
        
        if data['donations']:
            text += f"üìã <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:</b>\n\n"
            
            for i, donation in enumerate(data['donations'], 1):
                status_emoji = "‚úÖ" if donation['status'] == 'confirmed' else "‚è≥" if donation['status'] == 'pending' else "‚ùå"
                
                text += f"{status_emoji} <b>–î–æ–Ω–∞—Ç {offset + i}:</b>\n"
                text += f"   üë§ –°—Ç—Ä–∏–º–µ—Ä: {donation['streamer_name']}\n"
                text += f"   üí∞ –°—É–º–º–∞: {donation['amount']} {donation['asset_symbol']} ({donation['asset_network'].upper()})\n"
                
                if donation['message']:
                    message = donation['message'][:50] + "..." if len(donation['message']) > 50 else donation['message']
                    text += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
                
                text += f"   üìÖ –î–∞—Ç–∞: {donation['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                
                if donation['confirmed_at']:
                    text += f"   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {donation['confirmed_at'].strftime('%d.%m.%Y %H:%M')}\n"
                
                text += "\n"
        else:
            text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤."
        
        buttons = []
        nav_buttons = []
        
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sent_donations_page_{page - 1}"))
        
        if data['has_more']:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"sent_donations_page_{page + 1}"))
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "stop_being_streamer")
    async def cb_stop_being_streamer(callback: CallbackQuery):
        """Handler for stopping being a streamer - shows warning"""
        streamer = await db.get_streamer(callback.from_user.id, include_inactive=False)
        
        if not streamer:
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        text = "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞</b>\n\n"
        text += "üî¥ <b>–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ:</b>\n"
        text += "‚Ä¢ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞\n"
        text += "‚Ä¢ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å\n"
        text += "‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—Ä–∏–º–µ—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º\n\n"
        text += "üí° <b>–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—Ä–∏–º–µ—Ä</b>\n\n"
        text += "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º?"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_stop_streamer"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_stop_streamer")
                ]
            ])
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "confirm_stop_streamer")
    async def cb_confirm_stop_streamer(callback: CallbackQuery):
        """Confirmation of deactivation of a streamer"""
        streamer = await db.get_streamer(callback.from_user.id, include_inactive=False)
        
        if not streamer:
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        success = await db.remove_streamer(callback.from_user.id)
        
        if success:
            text = "‚úÖ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            text += "üî¥ <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:</b>\n"
            text += "‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—Ä–∏–º–µ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
            text += "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            text += "‚Ä¢ –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–Ω–∞—Ç—ã\n\n"
            text += "üíô <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!</b>\n"
            text += "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ —Å–Ω–æ–≤–∞ —Å—Ç–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º."
        else:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞</b>\n\n"
            text += "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        markup = await create_main_menu(callback.from_user.id)
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "cancel_stop_streamer")
    async def cb_cancel_stop_streamer(callback: CallbackQuery):
        """Cancel deactivation of a streamer"""
        text = "‚úÖ <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        text += "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üíô"
        
        markup = await create_main_menu(callback.from_user.id)
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()

    @dp.message(Command("status"))
    async def cmd_status(message: types.Message):
        await message.answer("–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_payment <payment_url>")

    @dp.message(Command("check_payment"))
    async def cmd_check_payment(message: types.Message):
        try:
            parts = message.text.split(maxsplit=1)
            if len(parts) < 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_payment <payment_url>")
                return
            
            payment_url = parts[1]
            
            status_info = grpc_client.check_transaction_status(payment_url)
            
            donation = await db.get_donation_by_payment_url(payment_url)
            if donation and status_info["confirmed"] and donation["status"] != "confirmed":
                await db.update_donation_status(
                    donation["id"], 
                    "confirmed", 
                    status_info.get("transaction_hash")
                )
                status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
            elif donation and donation["status"] == "confirmed":
                status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
            else:
                status_text = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            
            if donation:
                await message.answer(
                    f"–°—Ç–∞—Ç—É—Å –¥–æ–Ω–∞—Ç–∞ –¥–ª—è {donation['streamer_name']}:\n"
                    f"–°—É–º–º–∞: {donation['amount']} {donation['asset_symbol']} ({donation['asset_network'].upper()})\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                    f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {status_info.get('transaction_hash', '–ù–µ—Ç')}"
                )
            else:
                await message.answer("–î–æ–Ω–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    @dp.callback_query(lambda c: c.data == "reactivate_streamer")
    async def cb_reactivate_streamer(callback: CallbackQuery, state: FSMContext):
        """Reactivation of an existing streamer"""
        existing_streamer = await db.get_streamer(callback.from_user.id, include_inactive=True)
        
        if existing_streamer and not existing_streamer.get('is_active', False):
            streamer_id = await db.add_streamer(
                telegram_id=callback.from_user.id,
                wallet_address=existing_streamer['wallet_address'],
                name=existing_streamer['name'],
                username=callback.from_user.username
            )
            
            await callback.message.edit_text(
                f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                f"–ò–º—è: {existing_streamer['name']}\n"
                f"–ö–æ—à–µ–ª—ë–∫: {existing_streamer['wallet_address'][:6]}...{existing_streamer['wallet_address'][-4:]}\n"
                f"ID —Å—Ç—Ä–∏–º–µ—Ä–∞: {streamer_id}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
        
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "new_streamer_registration")
    async def cb_new_streamer_registration(callback: CallbackQuery, state: FSMContext):
        """New streamer registration"""
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await state.set_state(StreamerRegistration.waiting_for_name)
        await callback.answer()

    @dp.message(StreamerRegistration.waiting_for_name)
    async def process_new_streamer_name(message: types.Message, state: FSMContext):
        name = message.text.strip()
        if len(name) < 2:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        await state.update_data(name=name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):")
        await state.set_state(StreamerRegistration.waiting_for_wallet)

    @dp.message(StreamerRegistration.waiting_for_wallet)
    async def process_new_streamer_wallet(message: types.Message, state: FSMContext):
        wallet = message.text.strip()
        if not (wallet.startswith('0x') and len(wallet) == 42):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞).")
            return
        
        data = await state.get_data()
        name = data['name']
        
        streamer_id = await db.add_streamer(
            telegram_id=message.from_user.id,
            wallet_address=wallet,
            name=name,
            username=message.from_user.username
        )
        
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–∏–º–µ—Ä!\n"
            f"–ò–º—è: {name}\n"
            f"–ö–æ—à–µ–ª—ë–∫: {wallet[:6]}...{wallet[-4:]}\n"
            f"ID —Å—Ç—Ä–∏–º–µ—Ä–∞: {streamer_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()

    @dp.callback_query(lambda c: c.data == "my_donations")
    async def cb_my_donations(callback: CallbackQuery):
        """Handler for 'My Donations' button - shows sent donations"""
        page = 0
        offset = page * 5
        
        donor_name = await db.get_user_by_name_pattern(callback.from_user.id)
        
        data = await db.get_sent_donations_by_user(donor_name, limit=5, offset=offset)
        
        text = f"üì§ <b>–í–∞—à–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã</b>\n\n"
        text += f"üí∏ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> ~{data['total_amount_usd']:.2f} USD\n"
        text += f"üéØ <b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤:</b> {data['total_count']}\n\n"
        
        if data['donations']:
            text += f"üìã <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}:</b>\n\n"
            
            for i, donation in enumerate(data['donations'], 1):
                status_emoji = "‚úÖ" if donation['status'] == 'confirmed' else "‚è≥" if donation['status'] == 'pending' else "‚ùå"
                
                text += f"{status_emoji} <b>–î–æ–Ω–∞—Ç {offset + i}:</b>\n"
                text += f"   üë§ –°—Ç—Ä–∏–º–µ—Ä: {donation['streamer_name']}\n"
                text += f"   üí∞ –°—É–º–º–∞: {donation['amount']} {donation['asset_symbol']} ({donation['asset_network'].upper()})\n"
                
                if donation['message']:
                    message = donation['message'][:50] + "..." if len(donation['message']) > 50 else donation['message']
                    text += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
                
                text += f"   üìÖ –î–∞—Ç–∞: {donation['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                
                if donation['confirmed_at']:
                    text += f"   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {donation['confirmed_at'].strftime('%d.%m.%Y %H:%M')}\n"
                
                text += "\n"
        else:
            text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤."
        
        buttons = []
        nav_buttons = []
        
        if data['has_more']:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"sent_donations_page_{page + 1}"))
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "streamer_donations")
    async def cb_streamer_donations(callback: CallbackQuery):
        """Handler for 'Received Donations' button - shows received donations with conversion"""
        streamer = await db.get_streamer(callback.from_user.id, include_inactive=False)
        
        if not streamer:
            await callback.message.edit_text(
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        stats = await db.get_received_donations_stats(streamer['id'])
        
        total_amount_converted, currency_symbol = await get_user_currency_amount(
            callback.from_user.id, Decimal(str(stats['total']['amount']))
        )
        month_amount_converted, _ = await get_user_currency_amount(
            callback.from_user.id, Decimal(str(stats['month']['amount']))
        )
        week_amount_converted, _ = await get_user_currency_amount(
            callback.from_user.id, Decimal(str(stats['week']['amount']))
        )
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤</b>\n\n"
        text += f"üí∞ <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n"
        text += f"   ‚Ä¢ –î–æ–Ω–∞—Ç–æ–≤: {stats['total']['count']}\n"
        text += f"   ‚Ä¢ –°—É–º–º–∞: {total_amount_converted:.2f} {currency_symbol}\n\n"
        text += f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n"
        text += f"   ‚Ä¢ –î–æ–Ω–∞—Ç–æ–≤: {stats['month']['count']}\n"
        text += f"   ‚Ä¢ –°—É–º–º–∞: {month_amount_converted:.2f} {currency_symbol}\n\n"
        text += f"‚è∞ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n"
        text += f"   ‚Ä¢ –î–æ–Ω–∞—Ç–æ–≤: {stats['week']['count']}\n"
        text += f"   ‚Ä¢ –°—É–º–º–∞: {week_amount_converted:.2f} {currency_symbol}\n\n"
        text += f"<i>üí° –°—É–º–º—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–∞—à—É –≤–∞–ª—é—Ç—É –∏–∑ USD</i>"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "help")
    async def cb_help(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        help_text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "üéÅ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä—É\n"
            "üìä <b>–ú–æ–∏ –¥–æ–Ω–∞—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤\n"
            "üìà <b>–°—Ç–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Å—Ç—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–æ–≤\n"
            "üí∞ <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤)\n"
            "‚ùå <b>–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–º</b> - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
            "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/check_payment <b>—Å—Å—ã–ª–∫–∞</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞\n\n"
            "üí∞ <b>–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–Ω–∞—Ç–∞:</b>\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä–∞\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (USDT, ETH, etc.)\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å (Ethereum, BSC, etc.)\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã:\n"
            "   ‚Ä¢ üí∞ –í –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)\n"
            "   ‚Ä¢ üåç –í –≤–∞—à–µ–π —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ (USD, RUB, EUR)\n"
            "5. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "üåç <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
            "üá∫üá∏ USD (–¥–æ–ª–ª–∞—Ä –°–®–ê)\n"
            "üá∑üá∫ RUB (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å)\n"
            "üá™üá∫ EUR (–µ–≤—Ä–æ)\n\n"
            "üîó <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:</b>\n"
            "Ethereum, BSC, Polygon, Tron\n\n"
            "üí± <b>–í–∞–ª—é—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
            "‚Ä¢ –í—Å–µ —Å—É–º–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –≤–∞—à—É –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É –≤–≤–æ–¥–∞\n"
            "‚Ä¢ –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
            "‚Ä¢ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        )
        
        await callback.message.edit_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("check_payment_"))
    async def cb_check_payment(callback: CallbackQuery):
        """Handler for checking payment status through callback button"""
        try:
            donation_id = int(callback.data.split("_")[-1])
            
            donation = await db.get_donation_by_id(donation_id)
            
            if not donation:
                await callback.answer("‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            status_info = grpc_client.check_transaction_status(donation['payment_url'])
            
            if status_info["confirmed"] and donation["status"] != "confirmed":
                await db.update_donation_status(
                    donation["id"], 
                    "confirmed", 
                    status_info.get("transaction_hash")
                )
                status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
            elif donation["status"] == "confirmed":
                status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
            else:
                status_text = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            
            await callback.message.edit_text(
                f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                f"üë§ <b>–°—Ç—Ä–∏–º–µ—Ä:</b> {donation['streamer_name']}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {donation['amount']} {donation['asset_symbol']} ({donation['asset_network'].upper()})\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {donation['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üè∑Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"üîó <b>–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {status_info.get('transaction_hash', '–ù–µ—Ç')}\n\n"
                f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {donation.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{donation_id}")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", show_alert=True)
        
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("show_qr_"))
    async def cb_show_qr(callback: CallbackQuery):
        """Handler for showing QR code for payment"""
        try:
            donation_id = int(callback.data.split("_")[-1])
            
            donation = await db.get_donation_by_id(donation_id)
            
            if not donation:
                await callback.answer("‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            qr_response = grpc_client.get_payment_qr_code(donation['payment_url'])
            
            if qr_response and qr_response.qr_code_image:
                qr_file = BufferedInputFile(
                    qr_response.qr_code_image, 
                    filename=f"payment_qr_{donation_id}.png"
                )
                
                await callback.message.answer_photo(
                    photo=qr_file,
                    caption=f"üì± <b>QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
                            f"üë§ <b>–°—Ç—Ä–∏–º–µ—Ä:</b> {donation['streamer_name']}\n"
                            f"üí∞ <b>–°—É–º–º–∞:</b> {donation['amount']} {donation['asset_symbol']}\n"
                            f"üîó <b>–°–µ—Ç—å:</b> {donation['asset_network'].upper()}\n\n"
                            f"üì± <i>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{donation_id}")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞", show_alert=True)
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        
        await callback.answer()

    return bot, dp


async def shutdown_handler():
    db = await get_database()
    await db.disconnect() 