import logging
from decimal import Decimal
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from database import get_database
from database.repositories import UserRepository, CurrencyRepository

logger = logging.getLogger(__name__)

router = Router()

AVAILABLE_CURRENCIES = [
    {'code': 'USD', 'name': 'US Dollar', 'symbol': '$', 'flag': 'üá∫üá∏'},
    {'code': 'RUB', 'name': 'Russian Ruble', 'symbol': '‚ÇΩ', 'flag': 'üá∑üá∫'},
    {'code': 'EUR', 'name': 'Euro', 'symbol': '‚Ç¨', 'flag': 'üá™üá∫'},
]


def get_settings_keyboard() -> InlineKeyboardMarkup:
    """Creates settings keyboard"""
    keyboard = [
        [InlineKeyboardButton(text="üí± –í–∞–ª—é—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="settings_currency")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_currency_selection_keyboard() -> InlineKeyboardMarkup:
    """Creates keyboard for currency selection"""
    keyboard = []
    
    for i in range(0, len(AVAILABLE_CURRENCIES), 2):
        row = []
        for j in range(2):
            if i + j < len(AVAILABLE_CURRENCIES):
                currency = AVAILABLE_CURRENCIES[i + j]
                text = f"{currency['flag']} {currency['code']} {currency['symbol']}"
                callback_data = f"set_currency_{currency['code']}"
                row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(Command("settings"))
async def settings_command(message: Message):
    """Handler for /settings command"""
    try:
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                
                user = await user_repo.get_or_create_user(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                await session.commit()
                
                current_currency = user.preferred_currency
                currency_info = next(
                    (c for c in AVAILABLE_CURRENCIES if c['code'] == current_currency), 
                    AVAILABLE_CURRENCIES[0]  # Fallback –Ω–∞ USD
                )
                
                text = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.display_name}\n"
                    f"üí± <b>–í–∞–ª—é—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {currency_info['flag']} {currency_info['name']} ({currency_info['symbol']})\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
                )
                
                await message.answer(
                    text,
                    reply_markup=get_settings_keyboard(),
                    parse_mode="HTML"
                )
                
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "settings_currency")
async def currency_settings_callback(callback: CallbackQuery):
    """Handler for currency settings"""
    try:
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                user = await user_repo.get_by_telegram_id(callback.from_user.id)
                
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                current_currency = user.preferred_currency
                currency_info = next(
                    (c for c in AVAILABLE_CURRENCIES if c['code'] == current_currency), 
                    AVAILABLE_CURRENCIES[0]
                )
                
                text = (
                    "üí± <b>–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                    f"<b>–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞:</b> {currency_info['flag']} {currency_info['name']} ({currency_info['symbol']})\n\n"
                    "–≠—Ç–∞ –≤–∞–ª—é—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:\n"
                    "‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤\n"
                    "‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤\n" 
                    "‚Ä¢ –í–≤–æ–¥–∞ —Å—É–º–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:"
                )
                
                await callback.message.edit_text(
                    text,
                    reply_markup=get_currency_selection_keyboard(),
                    parse_mode="HTML"
                )
                
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ currency_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("set_currency_"))
async def set_currency_callback(callback: CallbackQuery):
    """Handler for setting currency"""
    try:
        currency_code = callback.data.split("_")[-1]
        
        currency_info = next(
            (c for c in AVAILABLE_CURRENCIES if c['code'] == currency_code), 
            None
        )
        
        if not currency_info:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞")
            return
        
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                
                updated_user = await user_repo.set_preferred_currency(
                    callback.from_user.id, 
                    currency_code
                )
                
                if updated_user:
                    await session.commit()
                    
                    text = (
                        f"‚úÖ <b>–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å—É–º–º—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞–ª—é—Ç–µ:\n"
                        f"{currency_info['flag']} <b>{currency_info['name']}</b> ({currency_info['symbol']})\n\n"
                        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º –±–æ—Ç–∞."
                    )
                    
                    await callback.message.edit_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")],
                            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ]),
                        parse_mode="HTML"
                    )
                    
                    await callback.answer(f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency_info['symbol']}")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
                    
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_currency_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings_callback(callback: CallbackQuery):
    """Returns to main settings"""
    try:
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                
                user = await user_repo.get_or_create_user(
                    telegram_id=callback.from_user.id,
                    username=callback.from_user.username,
                    first_name=callback.from_user.first_name,
                    last_name=callback.from_user.last_name
                )
                await session.commit()
                
                current_currency = user.preferred_currency
                currency_info = next(
                    (c for c in AVAILABLE_CURRENCIES if c['code'] == current_currency), 
                    AVAILABLE_CURRENCIES[0]
                )
                
                text = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.display_name}\n"
                    f"üí± <b>–í–∞–ª—é—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {currency_info['flag']} {currency_info['name']} ({currency_info['symbol']})\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
                )
                
                await callback.message.edit_text(
                    text,
                    reply_markup=get_settings_keyboard(),
                    parse_mode="HTML"
                )
                
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: CallbackQuery):
    """Returns to main menu"""
    from bot.keyboards.main_menu import get_main_menu_keyboard
    
    try:
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                user = await user_repo.get_by_telegram_id(callback.from_user.id)
                
                welcome_text = (
                    f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.display_name if user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                
                await callback.message.edit_text(
                    welcome_text,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="HTML"
                )
                
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_menu_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")


async def get_user_currency_amount(telegram_id: int, amount_usd: Decimal) -> tuple[Decimal, str]:
    """
    Converts amount from USD to user's currency
    
    Returns:
        tuple: (converted_amount, currency_symbol)
    """
    try:
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                currency_repo = CurrencyRepository(session)
                
                user_currency = await user_repo.get_preferred_currency(telegram_id)
                
                if user_currency == 'USD':
                    return amount_usd, '$'
                
                converted = await currency_repo.convert_amount(amount_usd, 'USD', user_currency)
                
                if converted:
                    currency_info = next(
                        (c for c in AVAILABLE_CURRENCIES if c['code'] == user_currency),
                        {'symbol': user_currency}
                    )
                    return converted, currency_info['symbol']
                else:
                    return amount_usd, '$'
                    
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return amount_usd, '$'


async def convert_user_currency_to_usd(telegram_id: int, amount: Decimal) -> Decimal:
    """
    Converts amount from user's currency to USD
    
    Returns:
        Decimal: amount in USD
    """
    try:
        db = await get_database()
        await db.connect()
        
        try:
            async with db.get_session() as session:
                user_repo = UserRepository(session)
                currency_repo = CurrencyRepository(session)
                
                user_currency = await user_repo.get_preferred_currency(telegram_id)
                
                if user_currency == 'USD':
                    return amount

                converted = await currency_repo.convert_amount(amount, user_currency, 'USD')
                
                return converted if converted else amount
                    
        finally:
            await db.disconnect()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ USD: {e}")
        return amount