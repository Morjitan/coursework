#!/usr/bin/env python3
import asyncio
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from database import get_database


async def init_base_assets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤...")
    print("=" * 50)
    
    base_assets = [
        {
            "symbol": "ETH",
            "name": "Ethereum",
            "network": "ethereum",
            "contract_address": None,
            "decimals": 18
        },
        {
            "symbol": "USDT",
            "name": "Tether USD",
            "network": "ethereum",
            "contract_address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
            "decimals": 6
        },
        {
            "symbol": "USDC",
            "name": "USD Coin",
            "network": "ethereum",
            "contract_address": "0xA0b86a33E6d53e4Ea71654A1CC9A4eC1e0Adc0F3",
            "decimals": 6
        },
        
        {
            "symbol": "BNB",
            "name": "BNB",
            "network": "bsc",
            "contract_address": None,
            "decimals": 18
        },
        {
            "symbol": "USDT",
            "name": "Tether USD",
            "network": "bsc",
            "contract_address": "0x55d398326f99059fF775485246999027B3197955",
            "decimals": 18
        },
        {
            "symbol": "USDC",
            "name": "USD Coin",
            "network": "bsc",
            "contract_address": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
            "decimals": 18
        },

        {
            "symbol": "TRX",
            "name": "Tron",
            "network": "tron",
            "contract_address": None,
            "decimals": 6
        },
        {
            "symbol": "USDT",
            "name": "Tether USD",
            "network": "tron",
            "contract_address": "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t",
            "decimals": 6
        },
        
        {
            "symbol": "ETH",
            "name": "Ethereum",
            "network": "base",
            "contract_address": None,
            "decimals": 18
        },
        {
            "symbol": "USDC",
            "name": "USD Coin", 
            "network": "base",
            "contract_address": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
            "decimals": 6
        }
    ]
    
    try:
        db = await get_database()
        await db.connect()
        
        created_count = 0
        updated_count = 0
        
        for asset_data in base_assets:
            print(f"‚ö° –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {asset_data['symbol']} ({asset_data['network'].upper()})...")
            
            existing_asset = await db.get_asset_by_symbol_and_network(
                asset_data['symbol'], 
                asset_data['network']
            )
            
            asset_id = await db.add_asset(
                symbol=asset_data['symbol'],
                name=asset_data['name'],
                network=asset_data['network'],
                contract_address=asset_data['contract_address'],
                decimals=asset_data['decimals'],
                is_active=True
            )
            
            if existing_asset:
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –∞–∫—Ç–∏–≤ ID: {asset_id}")
                updated_count += 1
            else:
                print(f"   üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤ ID: {asset_id}")
                created_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"   üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: {created_count}")
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
        print(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(base_assets)}")
        
        print(f"\nüìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:")
        all_assets = await db.get_all_assets()
        
        current_network = None
        for asset in all_assets:
            if current_network != asset['network']:
                current_network = asset['network']
                print(f"\nüåê {current_network.upper()}:")
            
            status = "‚úÖ" if asset['is_active'] else "‚ùå"
            contract_info = f" (Contract: {asset['contract_address'][:10]}...)" if asset['contract_address'] else " (Native)"
            print(f"   {status} {asset['symbol']} - {asset['name']}{contract_info}")
        
        await db.disconnect()
        
        print(f"\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–æ–≤: {e}")
        import traceback
        traceback.print_exc()


async def show_supported_networks():
    print("üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç–∏")
    print("=" * 40)
    
    networks = {
        "ethereum": {
            "name": "Ethereum Mainnet",
            "native_token": "ETH",
            "description": "–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å Ethereum —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ERC-20 —Ç–æ–∫–µ–Ω–æ–≤"
        },
        "bsc": {
            "name": "Binance Smart Chain",
            "native_token": "BNB", 
            "description": "EVM-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å–µ—Ç—å Binance —Å –Ω–∏–∑–∫–∏–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏"
        },
        "tron": {
            "name": "Tron Network",
            "native_token": "TRX",
            "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TRC-20 —Ç–æ–∫–µ–Ω–æ–≤"
        },
        "base": {
            "name": "Base (Coinbase)",
            "native_token": "ETH",
            "description": "L2 —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Optimism –æ—Ç Coinbase"
        }
    }
    
    for network_id, info in networks.items():
        print(f"\nüîó {info['name']} ({network_id})")
        print(f"   üí∞ –ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: {info['native_token']}")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")


def main():
    print("üè¶ –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞–º–∏")
    print("=" * 40)
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        asyncio.run(init_base_assets())
    elif choice == "2":
        asyncio.run(show_supported_networks())
    elif choice == "3":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


if __name__ == "__main__":
    main() 