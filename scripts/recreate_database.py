#!/usr/bin/env python3
import asyncio
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.ext.asyncio import create_async_engine
from database.models import Base


async def recreate_database():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    print("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)")
    
    print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    database_url = os.getenv(
        'DATABASE_URL', 
        'postgresql+asyncpg://postgres:password@localhost:5432/donation_bot'
    )
    
    engine = create_async_engine(
        database_url,
        echo=True,
        pool_pre_ping=True,
    )
    
    try:
        print("1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
            print("   ‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            print("   ‚úÖ –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π!")
        print("üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        print("   ‚Ä¢ users")
        print("   ‚Ä¢ streamers") 
        print("   ‚Ä¢ networks")
        print("   ‚Ä¢ oracle_types")
        print("   ‚Ä¢ oracles")
        print("   ‚Ä¢ assets")
        print("   ‚Ä¢ donations")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await engine.dispose()


async def main():
    await recreate_database()


if __name__ == "__main__":
    asyncio.run(main()) 