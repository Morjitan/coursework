#!/usr/bin/env python3
import asyncio
import aiohttp
import json
import sys
import argparse
import random
from typing import Dict, Any, List

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


def print_header():
    print(f"\n{Colors.CYAN}{Colors.BOLD} –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–∞—Ç–∞ —Å—Ç—Ä–∏–º–µ—Ä—É{Colors.ENDC}")
    print(f"{Colors.CYAN}{'=' * 50}{Colors.ENDC}\n")


def print_success(message: str):
    print(f"{Colors.GREEN} {message}{Colors.ENDC}")


def print_error(message: str):
    print(f"{Colors.RED} {message}{Colors.ENDC}")


def print_info(message: str):
    print(f"{Colors.BLUE}‚Ñπ  {message}{Colors.ENDC}")


def print_warning(message: str):
    print(f"{Colors.YELLOW}  {message}{Colors.ENDC}")


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API)
AVAILABLE_ASSETS = []


async def load_assets_from_database():
    try:
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        from database.database import get_database
        
        db = await get_database()
        await db.connect()
        
        try:
            assets = await db.get_all_assets()
            global AVAILABLE_ASSETS
            AVAILABLE_ASSETS = assets
            return True
        finally:
            await db.disconnect()
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–æ–≤: {e}")
        return False


def get_asset_by_symbol(symbol: str) -> Dict[str, Any]:
    for asset in AVAILABLE_ASSETS:
        if asset['symbol'].upper() == symbol.upper():
            return asset
    return None


def print_available_assets():
    print(f"\n{Colors.YELLOW} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:{Colors.ENDC}")
    if not AVAILABLE_ASSETS:
        print("  ‚ùå –ê–∫—Ç–∏–≤—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    for asset in AVAILABLE_ASSETS:
        network = asset.get('network', 'unknown').upper()
        print(f"  ‚Ä¢ {Colors.BOLD}{asset['symbol']}{Colors.ENDC} - {asset['name']} ({network})")


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–Ω–∞—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è asset_id)
DONATION_TEMPLATES = {
    "random": {
        "donors": ["–¢–µ—Å—Ç–µ—Ä123", "StreamFan", "CryptoLover", "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç–µ–ª—å", "–ê–Ω–æ–Ω–∏–º—É—Å", "Viewer777"],
        "amounts": [0.01, 0.05, 0.1, 0.5, 1.0, 2.5, 5.0],
        "asset_symbols": ["ETH", "USDT", "BNB", "MATIC", "TRX"],
        "messages": [
            "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–º!",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç!",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ",
            "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã",
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å—Ç—Ä–∏–º–µ—Ä–∞!",
            "–•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–µ—Ä–∂–∏!",
            "–¢–µ—Å—Ç —Ç–µ—Å—Ç —Ç–µ—Å—Ç 123",
            ""
        ]
    },
    "big": {
        "donor": "–©–µ–¥—Ä—ã–π_–î–æ–Ω–∞—Ç–µ—Ä",
        "amount": 10.0,
        "asset_symbol": "ETH",
        "message": "–ë–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç!"
    },
    "small": {
        "donor": "–ú–µ–ª–∫–∏–π_–ü–æ–¥–¥–µ—Ä–∂–∞—Ç–µ–ª—å",
        "amount": 0.01,
        "asset_symbol": "USDT",
        "message": "–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üòä"
    },
    "emoji": {
        "donor": "Emoji_–§–∞–Ω",
        "amount": 1.5,
        "asset_symbol": "BNB",
        "message": "üéÆüî•üíéüöÄüòçüéØüí™üéâ –≠–º–æ–¥–∑–∏ —Ç–µ—Å—Ç! üéâüí™üéØüòçüöÄüíéüî•üéÆ"
    },
    "long": {
        "donor": "–ë–æ–ª—Ç–ª–∏–≤—ã–π_–î–æ–Ω–∞—Ç–µ—Ä",
        "amount": 2.0,
        "asset_symbol": "ETH",
        "message": "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≥–æ, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –≤ –¥–æ–Ω–∞—Ç–∞—Ö. –Ø —Ö–æ—á—É —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞!"
    }
}


def generate_random_donation(streamer_id: str) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–Ω–∞—Ç"""
    template = DONATION_TEMPLATES["random"]
    
    available_symbols = [asset['symbol'] for asset in AVAILABLE_ASSETS]
    if not available_symbols:
        asset_symbol = random.choice(template["asset_symbols"])
    else:
        asset_symbol = random.choice(available_symbols)
    
    asset = get_asset_by_symbol(asset_symbol)
    if not asset:
        asset = AVAILABLE_ASSETS[0] if AVAILABLE_ASSETS else None
        if not asset:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    return {
        "streamer_id": streamer_id,
        "donor": random.choice(template["donors"]) + str(random.randint(1, 999)),
        "amount": random.choice(template["amounts"]),
        "asset_id": asset['id'],
        "asset_symbol": asset['symbol'],
        "message": random.choice(template["messages"])
    }


def create_donation_from_template(template_name: str, streamer_id: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –¥–æ–Ω–∞—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    if template_name == "random":
        return generate_random_donation(streamer_id)
    
    template = DONATION_TEMPLATES.get(template_name)
    if not template:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω: {template_name}")
    
    asset = get_asset_by_symbol(template["asset_symbol"])
    if not asset:
        raise ValueError(f"–ê–∫—Ç–∏–≤ {template['asset_symbol']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    return {
        "streamer_id": streamer_id,
        "donor": template["donor"],
        "amount": template["amount"],
        "asset_id": asset['id'],
        "asset_symbol": asset['symbol'],
        "message": template["message"]
    }


async def send_donation_new_api(donation_data: Dict[str, Any]) -> tuple[bool, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ç–∏–≤–æ–≤"""
    try:
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        from database.database import get_database
        import uuid
        
        db = await get_database()
        await db.connect()
        
        try:
            nonce = uuid.uuid4().hex
            payment_url = f"test://payment_{nonce}"
            
            donation_id = await db.create_donation(
                streamer_id=int(donation_data["streamer_id"]),
                asset_id=donation_data["asset_id"],
                donor_name=donation_data["donor"],
                amount=donation_data["amount"],
                message=donation_data["message"],
                payment_url=payment_url,
                nonce=nonce
            )
            
            # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await db.update_donation_status(donation_id, "confirmed", f"test_tx_{nonce[:8]}")
            
            return True, {"donation_id": donation_id, "nonce": nonce}
            
        finally:
            await db.disconnect()
            
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {e}"


async def send_donation_legacy_api(donation_data: Dict[str, Any], overlay_url: str = "http://localhost:8000") -> tuple[bool, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π overlay API (legacy)"""
    url = f"{overlay_url}/overlay/update"

    legacy_data = {
        "streamer_id": donation_data["streamer_id"],
        "donor": donation_data["donor"],
        "amount": donation_data["amount"],
        "currency": donation_data.get("asset_symbol", "ETH"),
        "message": donation_data["message"]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=legacy_data) as response:
                if response.status == 200:
                    result = await response.json()
                    return True, result
                else:
                    error_text = await response.text()
                    return False, f"HTTP {response.status}: {error_text}"
                    
    except aiohttp.ClientError as e:
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"


async def send_donation(donation_data: Dict[str, Any], use_legacy: bool = False, overlay_url: str = "http://localhost:8000") -> tuple[bool, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π API"""
    if use_legacy:
        return await send_donation_legacy_api(donation_data, overlay_url)
    else:
        return await send_donation_new_api(donation_data)


async def check_overlay_status(overlay_url: str = "http://localhost:8000") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å overlay —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{overlay_url}/health") as response:
                return response.status == 200
    except:
        return False


def print_donation_info(donation: Dict[str, Any]):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–∞—Ç–µ"""
    print(f"{Colors.MAGENTA}üìã –î–µ—Ç–∞–ª–∏ –¥–æ–Ω–∞—Ç–∞:{Colors.ENDC}")
    print(f"  üéØ –°—Ç—Ä–∏–º–µ—Ä ID: {Colors.BOLD}{donation['streamer_id']}{Colors.ENDC}")
    print(f"  üë§ –î–æ–Ω–∞—Ç–µ—Ä: {Colors.BOLD}{donation['donor']}{Colors.ENDC}")
    
    asset_info = f"{donation['amount']} {donation.get('asset_symbol', 'UNKNOWN')}"
    if 'asset_id' in donation:
        asset_info += f" (Asset ID: {donation['asset_id']})"
    print(f"  üí∞ –°—É–º–º–∞: {Colors.BOLD}{asset_info}{Colors.ENDC}")
    
    print(f"  üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {Colors.CYAN}{donation['message'] or '(–ø—É—Å—Ç–æ–µ)'}{Colors.ENDC}")


def print_available_templates():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    print(f"\n{Colors.YELLOW}üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:{Colors.ENDC}")
    for name, template in DONATION_TEMPLATES.items():
        if name == "random":
            print(f"  ‚Ä¢ {Colors.BOLD}random{Colors.ENDC} - —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã")
        else:
            print(f"  ‚Ä¢ {Colors.BOLD}{name}{Colors.ENDC} - {template['donor']}: {template['amount']} {template['asset_symbol']}")


async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–Ω–∞—Ç–∞"""
    print(f"\n{Colors.CYAN}üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º{Colors.ENDC}")
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–Ω–∞—Ç–∞ (Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):\n")
    
    if not AVAILABLE_ASSETS:
        print_info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤...")
        if not await load_assets_from_database():
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤—ã")
            return None
    
    streamer_id = input(f"{Colors.BLUE}Streamer ID{Colors.ENDC} [1]: ").strip() or "1"
    
    donor = input(f"{Colors.BLUE}–ò–º—è –¥–æ–Ω–∞—Ç–µ—Ä–∞{Colors.ENDC} [–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π_–¢–µ—Å—Ç–µ—Ä]: ").strip() or "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π_–¢–µ—Å—Ç–µ—Ä"
    
    while True:
        amount_str = input(f"{Colors.BLUE}–°—É–º–º–∞{Colors.ENDC} [1.0]: ").strip() or "1.0"
        try:
            amount = float(amount_str)
            break
        except ValueError:
            print_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    print_available_assets()
    while True:
        asset_symbol = input(f"{Colors.BLUE}–°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞{Colors.ENDC} [ETH]: ").strip().upper() or "ETH"
        asset = get_asset_by_symbol(asset_symbol)
        if asset:
            break
        print_error(f"–ê–∫—Ç–∏–≤ {asset_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join([a['symbol'] for a in AVAILABLE_ASSETS])}")
    
    message = input(f"{Colors.BLUE}–°–æ–æ–±—â–µ–Ω–∏–µ{Colors.ENDC} [–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç]: ").strip() or "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç"
    
    return {
        "streamer_id": streamer_id,
        "donor": donor,
        "amount": amount,
        "asset_id": asset['id'],
        "asset_symbol": asset['symbol'],
        "message": message
    }


async def bulk_donations(count: int, streamer_id: str, delay: float = 1.0, use_legacy: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤"""
    print(f"\n{Colors.YELLOW}üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {count} —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {delay}—Å{Colors.ENDC}")
    
    if not AVAILABLE_ASSETS:
        print_info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤...")
        if not await load_assets_from_database():
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤—ã")
            return
    
    success_count = 0
    
    for i in range(1, count + 1):
        print(f"\n{Colors.CYAN}–î–æ–Ω–∞—Ç {i}/{count}:{Colors.ENDC}")
        
        try:
            donation = generate_random_donation(streamer_id)
            print_donation_info(donation)
            
            success, result = await send_donation(donation, use_legacy)
            
            if success:
                print_success(f"–î–æ–Ω–∞—Ç {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                success_count += 1
            else:
                print_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–Ω–∞—Ç–∞ {i}: {result}")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–Ω–∞—Ç–∞ {i}: {e}")
        
        if i < count:
            print(f"{Colors.BLUE}–û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å...{Colors.ENDC}")
            await asyncio.sleep(delay)
    
    print(f"\n{Colors.MAGENTA}üìä –ò—Ç–æ–≥–æ: {success_count}/{count} –¥–æ–Ω–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ{Colors.ENDC}")


async def main():
    parser = argparse.ArgumentParser(
        description="–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ —Å—Ç—Ä–∏–º–µ—Ä—É (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–æ–≤)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/send_test_donation.py                           # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python scripts/send_test_donation.py --template random         # –°–ª—É—á–∞–π–Ω—ã–π –¥–æ–Ω–∞—Ç —Å—Ç—Ä–∏–º–µ—Ä—É #1
  python scripts/send_test_donation.py --template big --id 2     # –ë–æ–ª—å—à–æ–π –¥–æ–Ω–∞—Ç —Å—Ç—Ä–∏–º–µ—Ä—É #2
  python scripts/send_test_donation.py --bulk 5                  # 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤
  python scripts/send_test_donation.py --custom --donor "–¢–µ—Å—Ç" --amount 3.5 --asset ETH --message "–ü—Ä–∏–≤–µ—Ç!"
  python scripts/send_test_donation.py --legacy                  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π overlay API
        """
    )
    
    parser.add_argument("--streamer-id", "-id", default="1", help="ID —Å—Ç—Ä–∏–º–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
    parser.add_argument("--template", "-t", choices=list(DONATION_TEMPLATES.keys()), 
                       help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    parser.add_argument("--templates", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")
    parser.add_argument("--assets", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã")
    parser.add_argument("--interactive", "-i", action="store_true", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    parser.add_argument("--bulk", "-b", type=int, help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤")
    parser.add_argument("--delay", type=float, default=1.0, help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–Ω–∞—Ç–∞–º–∏ –≤ bulk —Ä–µ–∂–∏–º–µ (—Å–µ–∫)")
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–Ω–∞—Ç
    parser.add_argument("--custom", "-c", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–Ω–∞—Ç")
    parser.add_argument("--donor", help="–ò–º—è –¥–æ–Ω–∞—Ç–µ—Ä–∞")
    parser.add_argument("--amount", type=float, help="–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞")
    parser.add_argument("--asset", help="–°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (ETH, USDT, BNB, etc.)")
    parser.add_argument("--message", default="", help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞")
    
    parser.add_argument("--legacy", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π overlay API")
    parser.add_argument("--url", default="http://localhost:8000", help="URL overlay —Å–µ—Ä–≤–∏—Å–∞")
    parser.add_argument("--no-check", action="store_true", help="–ù–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞")
    
    args = parser.parse_args()
    
    print_header()
    
    if not args.templates:
        print_info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if not await load_assets_from_database():
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return 1
        print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(AVAILABLE_ASSETS)} –∞–∫—Ç–∏–≤–æ–≤")
    
    if args.assets:
        print_available_assets()
        return 0
    
    if args.templates:
        print_available_templates()
        return 0
    
    if args.legacy and not args.no_check:
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ overlay —Å–µ—Ä–≤–∏—Å–∞...")
        if not await check_overlay_status(args.url):
            print_error(f"Overlay —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {args.url}")
            print_warning("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: make up")
            print_info("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --no-check –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return 1
        print_success("Overlay —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if args.bulk:
        await bulk_donations(args.bulk, args.streamer_id, args.delay, args.legacy)
        return 0
    
    donation_data = None
    
    if args.custom:
        if not all([args.donor, args.amount, args.asset]):
            print_error("–î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–æ–Ω–∞—Ç–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è: --donor, --amount, --asset")
            return 1
        
        asset = get_asset_by_symbol(args.asset)
        if not asset:
            print_error(f"–ê–∫—Ç–∏–≤ {args.asset} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print_available_assets()
            return 1
        
        donation_data = {
            "streamer_id": args.streamer_id,
            "donor": args.donor,
            "amount": args.amount,
            "asset_id": asset['id'],
            "asset_symbol": asset['symbol'],
            "message": args.message
        }
        
    elif args.template:
        try:
            donation_data = create_donation_from_template(args.template, args.streamer_id)
        except ValueError as e:
            print_error(str(e))
            print_available_templates()
            return 1
            
    elif args.interactive or len(sys.argv) == 1:
        donation_data = await interactive_mode()
        if not donation_data:
            return 1
        
    else:
        parser.print_help()
        return 1
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–Ω–∞—Ç–∞
    api_type = "legacy overlay" if args.legacy else "–Ω–æ–≤—ã–π database"
    print(f"\n{Colors.YELLOW}üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ {api_type} API...{Colors.ENDC}")
    print_donation_info(donation_data)
    
    success, result = await send_donation(donation_data, args.legacy, args.url)
    
    if success:
        print_success("–î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        if not args.legacy:
            print_info(f"ID –¥–æ–Ω–∞—Ç–∞: {result.get('donation_id', 'N/A')}")
        print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ overlay —Å—Ç—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞")
        print(f"{Colors.CYAN}üåê Overlay URL: {args.url}/overlay/html/{args.streamer_id}{Colors.ENDC}")
        return 0
    else:
        print_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–Ω–∞—Ç–∞: {result}")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
        sys.exit(130) 